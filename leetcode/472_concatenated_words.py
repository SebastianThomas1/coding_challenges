# Sebastian Thomas (coding at sebastianthomas dot de)

# https://leetcode.com/problems/concatenated-words/
#
# 472. Concatenated Words
#
# Given an array of strings words (without duplicates), return all the
# concatenated words in the given list of words.
#
# A concatenated word is defined as a string that is comprised entirely
# of at least two shorter words in the given array.

from typing import List, Set


def word_break(s: str, words: Set[str]) -> bool:
    if not words:
        return False

    # concat[idx]: whether s[:idx] is generated by words
    concat = [False] * (len(s) + 1)
    concat[0] = True

    for i in range(1, len(s) + 1):
        concat[i] = any(concat[j] and s[j:i] in words
                        for j in range(i - 1, -1, -1))

    return concat[-1]


def find_all_concatenated_words_in_a_dict(words: List[str]):
    if '' in words:
        words.remove('')
    words.sort(key=len)

    concatenated_words = []
    atomic_words = set()

    # for each short word start building preWords
    for word in words:
        if word_break(word, atomic_words):
            concatenated_words.append(word)
        else:
            atomic_words.add(word)

    return concatenated_words


if __name__ == '__main__':
    print(find_all_concatenated_words_in_a_dict(['cat', 'cats', 'catsdogcats',
                                                 'dog', 'dogcatsdog',
                                                 'hippopotamuses', 'rat',
                                                 'ratcatdogcat']))
    # ['catsdogcats', 'dogcatsdog', 'ratcatdogcat']
    print(find_all_concatenated_words_in_a_dict(['cat', 'dog', 'catdog']))
    # ['catdog']

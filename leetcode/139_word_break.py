# Sebastian Thomas (coding at sebastianthomas dot de)

# https://leetcode.com/problems/word-break/
#
# 139. Word Break
#
# Given a non-empty string s and a dictionary wordDict containing a list
# of non-empty words, determine if s can be segmented into a
# space-separated sequence of one or more dictionary words.
#
# Note:
#
# The same word in the dictionary may be reused multiple times in the
# segmentation.
# You may assume the dictionary does not contain duplicate words.

from typing import List


def word_break(s: str, words: List[str]) -> bool:
    if not words:
        return False

    # concat[idx]: whether s[:idx] is generated by words
    concat = [False] * (len(s) + 1)
    concat[0] = True

    for i in range(1, len(s) + 1):
        concat[i] = any(concat[j] and s[j:i] in words
                        for j in range(i - 1, -1, -1))

    return concat[-1]


if __name__ == '__main__':
    print(word_break('leetcode', ['leet', 'code']))  # True
    print(word_break('applepenapple', ['apple', 'pen']))  # True
    print(word_break('catsandog', ['cats', 'dog', 'sand', 'and', 'cat']))
    # False
